within SysMo.Automotive.CryoCompressed;

model CryocompressedVehicle_v1
  inner Modelica.Fluid.System system(energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial, massDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial, momentumDynamics = Modelica.Fluid.Types.Dynamics.FixedInitial) annotation(
    Placement(visible = true, transformation(origin = {-444, 168}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.CombiTimeTable drive_cycle_table(extrapolation = Modelica.Blocks.Types.Extrapolation.HoldLastPoint, smoothness = Modelica.Blocks.Types.Smoothness.ConstantSegments, table = drive_cycle_csv.getRealArray2D(9, 3), verboseRead = true) annotation(
    Placement(visible = true, transformation(origin = {-182, 140}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  inner parameter ExternData.CSVFile drive_cycle_csv(fileName = "/data/Workspace/SysMo/modelica/SysMo/Automotive/CryoCompressed/DriveCycle.csv", nHeaderLines = 1, verboseRead = true) annotation(
    Placement(visible = true, transformation(origin = {-332, 98}, extent = {{-80, 60}, {-60, 80}}, rotation = 0)));
  parameter Modelica.Units.SI.Volume v_tank = 0.2;
  package h2_medium = Media.HydrogenCoolprop;
  Modelica.Thermal.HeatTransfer.Sources.FixedTemperature t_ambient(T = system.T_start) annotation(
    Placement(visible = true, transformation(origin = {-212, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Valves.ValveLinear tank_extraction_valve(redeclare package Medium = h2_medium, dp_nominal = 10000000, m_flow_nominal = 1e-1) annotation(
    Placement(visible = true, transformation(origin = {20, -50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Sources.FixedBoundary fc_sink(redeclare package Medium = h2_medium, T = 290, nPorts = 1, p = 5e5, use_T = true, use_p = true) annotation(
    Placement(visible = true, transformation(origin = {572, -66}, extent = {{10, -10}, {-10, 10}}, rotation = 0)));
  SysMo.Automotive.CryoCompressed.VehicleControllerSG vehicle_controller annotation(
    Placement(visible = true, transformation(origin = {-46, 122}, extent = {{-18, -36}, {18, 36}}, rotation = 0)));
  Modelica.Blocks.Math.BooleanToReal tank_extr_b2r(realFalse = 0.0, realTrue = 1.0)  annotation(
    Placement(visible = true, transformation(origin = {20, -8}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  Modelica.Blocks.Math.RealToInteger driving_mode_r2i annotation(
    Placement(visible = true, transformation(origin = {-98, 140}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.BooleanToReal tank_h2_b2r(realFalse = 0.0, realTrue = 5e4) annotation(
    Placement(visible = true, transformation(origin = {-148, 66}, extent = {{-10, -10}, {10, 10}}, rotation = -90)));
  Modelica.Thermal.HeatTransfer.Sources.PrescribedHeatFlow tank_he_source annotation(
    Placement(visible = true, transformation(origin = {-130, 34}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.Gain mdot_extr_gain(k = 1000) annotation(
    Placement(visible = true, transformation(origin = {457, -33}, extent = {{7, -7}, {-7, 7}}, rotation = 0)));
  Modelica.Fluid.Sensors.MassFlowRate fc_mdot(redeclare package Medium = h2_medium) annotation(
    Placement(visible = true, transformation(origin = {520, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Sources.Constant k_conv_pr_fr(k = 0.15) annotation(
    Placement(visible = true, transformation(origin = {174, -102}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Continuous.TransferFunction fr_tf(a = {1, 1}, b = {1}) annotation(
    Placement(visible = true, transformation(origin = {462, -12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Math.Product fr_product annotation(
    Placement(visible = true, transformation(origin = {502, -6}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Fluid.Valves.ValveLinear fuel_regulator(redeclare package Medium = h2_medium, dp_nominal = 99999.99999999999, m_flow_nominal = 1e-3) annotation(
    Placement(visible = true, transformation(origin = {448, -66}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Blocks.Continuous.LimPID fr_pid(Ti = 1, controllerType = Modelica.Blocks.Types.SimpleController.PI, k = 1e-1, wp = 1, yMax = 1, yMin = 0) annotation(
    Placement(visible = true, transformation(origin = {430, -12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Thermal.HeatTransfer.Components.Convection conv_pr_fr annotation(
    Placement(visible = true, transformation(origin = {200, -124}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  SysMo.Automotive.CryoCompressed.CcH2InnerVessel cch2_inner_vessel(redeclare package h2_medium = h2_medium, v_tank = 0.2)  annotation(
    Placement(visible = true, transformation(origin = {-117.333, -46.4}, extent = {{-75.3333, -22.6}, {75.3333, 22.6}}, rotation = 0)));
  SysMo.Automotive.CryoCompressed.Heater heater(redeclare package h2_medium = h2_medium)  annotation(
    Placement(visible = true, transformation(origin = {89.9683, -50.1873}, extent = {{-22.9683, -9.18732}, {22.9683, 9.18732}}, rotation = 0)));
  SysMo.Automotive.CryoCompressed.PressureRegulator pressure_regulator(redeclare package h2_medium = h2_medium)  annotation(
    Placement(visible = true, transformation(origin = {215, -47}, extent = {{-31, -31}, {31, 31}}, rotation = 0)));
equation
  connect(tank_extr_b2r.y, tank_extraction_valve.opening) annotation(
    Line(points = {{20, -19}, {20, -43}}, color = {0, 0, 127}));
  connect(driving_mode_r2i.y, vehicle_controller.requested_mode) annotation(
    Line(points = {{-87, 140}, {-69, 140}}, color = {255, 127, 0}));
  connect(drive_cycle_table.y[1], driving_mode_r2i.u) annotation(
    Line(points = {{-171, 140}, {-111, 140}}, color = {0, 0, 127}));
  connect(vehicle_controller.v_extr, tank_extr_b2r.u) annotation(
    Line(points = {{-26.2, 139.64}, {19.8, 139.64}, {19.8, 3.64}}, color = {255, 0, 255}));
  connect(tank_h2_b2r.y, tank_he_source.Q_flow) annotation(
    Line(points = {{-148, 55}, {-148, 34}, {-140, 34}}, color = {0, 0, 127}));
  connect(vehicle_controller.he_out, tank_h2_b2r.u) annotation(
    Line(points = {{-26.2, 114.44}, {-10.2, 114.44}, {-10.2, 82.44}, {-148.2, 82.44}, {-148.2, 78.44}}, color = {255, 0, 255}));
  connect(fr_product.y, fuel_regulator.opening) annotation(
    Line(points = {{513, -6}, {523, -6}, {523, -46}, {447, -46}, {447, -58}}, color = {0, 0, 127}));
  connect(k_conv_pr_fr.y, conv_pr_fr.Gc) annotation(
    Line(points = {{180.6, -102}, {200.6, -102}, {200.6, -114}}, color = {0, 0, 127}));
  connect(fr_tf.y, fr_product.u2) annotation(
    Line(points = {{473, -12}, {489, -12}}, color = {0, 0, 127}));
  connect(mdot_extr_gain.y, fr_pid.u_m) annotation(
    Line(points = {{449.3, -33}, {430.3, -33}, {430.3, -24}}, color = {0, 0, 127}));
  connect(fc_mdot.m_flow, mdot_extr_gain.u) annotation(
    Line(points = {{520, -55}, {520, -33}, {465, -33}}, color = {0, 0, 127}));
  connect(fr_pid.y, fr_tf.u) annotation(
    Line(points = {{441, -12}, {449, -12}}, color = {0, 0, 127}));
  connect(fuel_regulator.port_b, fc_mdot.port_a) annotation(
    Line(points = {{458, -66}, {510, -66}}, color = {0, 127, 255}));
  connect(fc_mdot.port_b, fc_sink.ports[1]) annotation(
    Line(points = {{530, -66}, {562, -66}}, color = {0, 127, 255}));
  connect(drive_cycle_table.y[2], fr_pid.u_s) annotation(
    Line(points = {{-171, 140}, {-129, 140}, {-129, 168}, {289, 168}, {289, -12}, {418, -12}}, color = {0, 0, 127}));
  connect(tank_extr_b2r.y, fr_product.u1) annotation(
    Line(points = {{20, -19}, {20, -29}, {76, -29}, {76, 55}, {480, 55}, {480, 0}, {490, 0}}, color = {0, 0, 127}));
  connect(cch2_inner_vessel.extraction_port, tank_extraction_valve.port_a) annotation(
    Line(points = {{-38, -50}, {10, -50}}));
  connect(t_ambient.port, cch2_inner_vessel.amb_heat) annotation(
    Line(points = {{-202, 0}, {-174, 0}, {-174, -20}}, color = {191, 0, 0}));
  connect(tank_he_source.port, cch2_inner_vessel.tank_he_heat) annotation(
    Line(points = {{-120, 34}, {-112, 34}, {-112, 12}, {-152, 12}, {-152, -20}}, color = {191, 0, 0}));
  connect(cch2_inner_vessel.p_out, vehicle_controller.p_tank) annotation(
    Line(points = {{-106, -20}, {-106, 108}, {-68, 108}}, color = {0, 0, 127}));
  connect(tank_extraction_valve.port_b, heater.inlet) annotation(
    Line(points = {{30, -50}, {65, -50}}));
  connect(pressure_regulator.heat_port, conv_pr_fr.fluid) annotation(
    Line(points = {{215, -78}, {215, -124}, {210, -124}}, color = {191, 0, 0}));
  connect(heater.outlet, pressure_regulator.inlet) annotation(
    Line(points = {{115, -51}, {191, -51}}, color = {0, 127, 255}));
  connect(pressure_regulator.outlet, fuel_regulator.port_a) annotation(
    Line(points = {{239, -60}, {390, -60}, {390, -66}, {438, -66}}, color = {0, 127, 255}));
  annotation(
    Diagram(coordinateSystem(extent = {{-500, -200}, {500, 200}})),
    Icon(coordinateSystem(extent = {{-500, -200}, {500, 200}}), graphics = {Bitmap( origin = {-36, 56},extent = {{200, -200}, {-200, 200}}, imageSource = "")}),
    experiment(StartTime = 0, StopTime = 10000, Tolerance = 1e-06, Interval = 10),
    __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian",
    __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "dassl", variableFilter = ".*"));
end CryocompressedVehicle_v1;